/project/c_gnn_001/conda_envs/cuda121/lib/python3.11/site-packages/sklearn/base.py:376: InconsistentVersionWarning: Trying to unpickle estimator MinMaxScaler from version 1.3.0 when using version 1.5.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(
Namespace(data_dir='../tsp_input/generated_insatnces_3000_size_50/', tb_dir='../atsp_model_train_result', atsp_size=50, to_homo=False, half_st=False, model='HetroGATConcat', input_dim=1, hidden_dim=128, output_dim=1, relation_types='ss tt pp', n_gnn_layers=4, n_heads=64, jk='cat', lr_init=0.001, lr_decay=0.95, min_delta=0.0001, patience=200, batch_size=15, n_epochs=100, checkpoint_freq=10, seed=4, n_trials=1, n_samples_result_train=30, device='cuda')
Namespace(atsp_size=100, data_path='../tsp_input/generated_insatnces_30_size_100', model_path='../atsp_model_train_result/Oct17_04-09-53_HetroGATConcat_trained_ATSP50/trial_0', time_limit=0.16, perturbation_moves=5, device='cuda', half_st=False, relation_types='ss tt pp st')
model: HetroGATConcat trained in ATSP100 for 100 and tested in ATSP100 for 30
device = cuda
Traceback (most recent call last):
  File "/project/c_gnn_001/code/tsp/atsp_gnn/test.py", line 158, in <module>
    main(args_test)
  File "/project/c_gnn_001/code/tsp/atsp_gnn/test.py", line 43, in main
    model.load_state_dict(checkpoint['model_state_dict'])
  File "/project/c_gnn_001/conda_envs/cuda121/lib/python3.11/site-packages/torch/nn/modules/module.py", line 2215, in load_state_dict
    raise RuntimeError('Error(s) in loading state_dict for {}:\n\t{}'.format(
RuntimeError: Error(s) in loading state_dict for HetroGATConcat:
	Missing key(s) in state_dict: "embed_layer.fc1.weight", "embed_layer.fc1.bias", "embed_layer.fc2.weight", "embed_layer.fc2.bias", "mlp_layers.0.fc1.weight", "mlp_layers.0.fc1.bias", "mlp_layers.0.fc2.weight", "mlp_layers.0.fc2.bias", "mlp_layers.1.fc1.weight", "mlp_layers.1.fc1.bias", "mlp_layers.1.fc2.weight", "mlp_layers.1.fc2.bias", "mlp_layers.2.fc1.weight", "mlp_layers.2.fc1.bias", "mlp_layers.2.fc2.weight", "mlp_layers.2.fc2.bias", "mlp_layers.3.fc1.weight", "mlp_layers.3.fc1.bias", "mlp_layers.3.fc2.weight", "mlp_layers.3.fc2.bias", "decision_layer.fc1.weight", "decision_layer.fc1.bias", "decision_layer.fc2.weight", "decision_layer.fc2.bias". 
	Unexpected key(s) in state_dict: "embed_layer.linears.0.weight", "embed_layer.linears.0.bias", "embed_layer.linears.1.weight", "embed_layer.linears.1.bias", "embed_layer.batch_norm.weight", "embed_layer.batch_norm.bias", "embed_layer.batch_norm.running_mean", "embed_layer.batch_norm.running_var", "embed_layer.batch_norm.num_batches_tracked", "mlp_layers.0.linears.0.weight", "mlp_layers.0.linears.0.bias", "mlp_layers.0.linears.1.weight", "mlp_layers.0.linears.1.bias", "mlp_layers.0.batch_norm.weight", "mlp_layers.0.batch_norm.bias", "mlp_layers.0.batch_norm.running_mean", "mlp_layers.0.batch_norm.running_var", "mlp_layers.0.batch_norm.num_batches_tracked", "mlp_layers.1.linears.0.weight", "mlp_layers.1.linears.0.bias", "mlp_layers.1.linears.1.weight", "mlp_layers.1.linears.1.bias", "mlp_layers.1.batch_norm.weight", "mlp_layers.1.batch_norm.bias", "mlp_layers.1.batch_norm.running_mean", "mlp_layers.1.batch_norm.running_var", "mlp_layers.1.batch_norm.num_batches_tracked", "mlp_layers.2.linears.0.weight", "mlp_layers.2.linears.0.bias", "mlp_layers.2.linears.1.weight", "mlp_layers.2.linears.1.bias", "mlp_layers.2.batch_norm.weight", "mlp_layers.2.batch_norm.bias", "mlp_layers.2.batch_norm.running_mean", "mlp_layers.2.batch_norm.running_var", "mlp_layers.2.batch_norm.num_batches_tracked", "mlp_layers.3.linears.0.weight", "mlp_layers.3.linears.0.bias", "mlp_layers.3.linears.1.weight", "mlp_layers.3.linears.1.bias", "mlp_layers.3.batch_norm.weight", "mlp_layers.3.batch_norm.bias", "mlp_layers.3.batch_norm.running_mean", "mlp_layers.3.batch_norm.running_var", "mlp_layers.3.batch_norm.num_batches_tracked", "decision_layer.linears.0.weight", "decision_layer.linears.0.bias", "decision_layer.linears.1.weight", "decision_layer.linears.1.bias", "decision_layer.batch_norm.weight", "decision_layer.batch_norm.bias", "decision_layer.batch_norm.running_mean", "decision_layer.batch_norm.running_var", "decision_layer.batch_norm.num_batches_tracked". 
